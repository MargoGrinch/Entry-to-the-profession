from PyInquirer import prompt
from uuid import uuid1
from pprint import pprint
from datetime import date
import actions
import utils

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
products = []

def get_action_index():
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É PyInquirer –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É–¥–æ–±–Ω–æ–≥–æ CLI
	# –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: https://github.com/CITGuru/PyInquirer#documentation
    answers = prompt([
        {
            'type': 'list',
            'message': 'Select action',
            'name': 'action_index',
            'choices': [
                {
                    'name': 'üè¨ Gel all products',
                    'value': 0
                },
                {
                    'name': 'üîé Get product by ID',
                    'value': 1
                },
                {
                    'name': 'üîÑ Update product',
                    'value': 2
                },
                {
                    'name': 'üóëÔ∏è  Remove product',
                    'value': 3
                },
                {
                    'name': '‚ûï Add new product',
                    'value': 4
                },
                {
                    'name': '‚ùå Quit',
                    'value': 5
                }
            ]
        }
    ])

	# –í–µ—Ä–Ω—É—Ç—å –ø–æ–ª–µ `action_index`
    return answers.get('action_index')

def switch_action(action_index):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω–æ–≤
    if action_index == 0:
        pprint(actions.get_all_products(products))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
    if action_index == 1:
		# –ü–æ–ø—ã—Ç–∞—Ç—Å—è –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç
        result = actions.get_product_by_id(utils.input_product_id(), products)

        if result is not None:
            pprint(result)
        else:
            print('Unable to find product')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    elif action_index == 2:
		# –í–≤–µ—Å—Ç–∏ ID –ø—Ä–æ–¥—É–∫—Ç–∞
        product_id = utils.input_product_id()
		# –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        product_data = utils.input_product_data()
		# –ü–æ–ø—ã—Ç–∞—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
        result = actions.update_product_by_id(product_id, products, product_data)

        if result is not None:
            pprint(result)
        else:
            print("Unable to update product")

	# –£–¥–∞–ª–∏–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    elif action_index == 3:
		# –í–≤–µ—Å—Ç–∏ ID –ø—Ä–æ–¥—É–∫—Ç–∞
        product_id = utils.input_product_id()
		# –ü–æ–ø—ã—Ç–∞—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
        result = actions.remove_product_by_id(product_id, products)

        if result is not None:
            pprint(result)
        else:
            print("Unable to remove product")

	# –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    elif action_index == 4:
		# –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
        product_data = utils.input_product_data()
		# –°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        new_product = {
            'id': uuid1(), # —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID
            **product_data,
            'created_at': date.today().strftime("%d/%m/%Y") # –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
        }

		# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–ø–∏—Å–æ–∫
        product = actions.add_product(new_product, products)

        pprint(product)

	# –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é
    if action_index in range(5):
        switch_action(get_action_index())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == '__main__':
	switch_action(get_action_index())
